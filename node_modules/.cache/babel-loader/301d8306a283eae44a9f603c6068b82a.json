{"ast":null,"code":"import _defineProperty from \"C:/Users/Edo/Documents/GitHub/infomedic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/Users/Edo/Documents/GitHub/infomedic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport var makePropTypes = makePropTypesFactory(function (vars) {\n  return {\n    backgroundColor: PropTypes.oneOf([].concat(_toConsumableArray(vars.colors), _toConsumableArray(vars.shades))),\n    italic: PropTypes.bool,\n    textAlign: PropTypes.oneOf(vars.textAlignments),\n    textColor: PropTypes.oneOf([].concat(_toConsumableArray(vars.colors), _toConsumableArray(vars.shades))),\n    textSize: PropTypes.oneOf(vars.textSizes),\n    textTransform: PropTypes.oneOf(vars.textTransforms),\n    textWeight: PropTypes.oneOf(vars.textWeights)\n  };\n});\nexport var transform = function transform(props) {\n  var _classNames;\n\n  var backgroundColor = props.backgroundColor,\n      className = props.className,\n      italic = props.italic,\n      textAlign = props.textAlign,\n      textColor = props.textColor,\n      textSize = props.textSize,\n      textTransform = props.textTransform,\n      textWeight = props.textWeight,\n      rest = tslib_1.__rest(props, [\"backgroundColor\", \"className\", \"italic\", \"textAlign\", \"textColor\", \"textSize\", \"textTransform\", \"textWeight\"]);\n\n  return Object.assign({\n    className: classNames((_classNames = {}, _defineProperty(_classNames, \"has-background-\".concat(backgroundColor), backgroundColor), _defineProperty(_classNames, \"has-text-\".concat(textColor), textColor), _defineProperty(_classNames, \"is-italic\", italic), _defineProperty(_classNames, \"is-\".concat(textTransform), textTransform), _defineProperty(_classNames, \"has-text-\".concat(textAlign), textAlign), _defineProperty(_classNames, \"has-text-weight-\".concat(textWeight), textWeight), _defineProperty(_classNames, \"is-size-\".concat(textSize), textSize), _classNames), className)\n  }, rest);\n};\nexport var makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":{"version":3,"sources":["../../../src/base/helpers/typography.ts"],"names":[],"mappings":";;;AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;AAEA,SACE,oBADF,EAEE,8BAFF,QAIO,WAJP;AAkBA,OAAO,IAAM,aAAa,GAAG,oBAAoB,CAAC,UAAA,IAAI;AAAA,SAAK;AACzD,IAAA,eAAe,EAAE,SAAS,CAAC,KAAV,8BAAoB,IAAI,CAAC,MAAzB,sBAAoC,IAAI,CAAC,MAAzC,GADwC;AAEzD,IAAA,MAAM,EAAE,SAAS,CAAC,IAFuC;AAGzD,IAAA,SAAS,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,cAArB,CAH8C;AAIzD,IAAA,SAAS,EAAE,SAAS,CAAC,KAAV,8BAAoB,IAAI,CAAC,MAAzB,sBAAoC,IAAI,CAAC,MAAzC,GAJ8C;AAKzD,IAAA,QAAQ,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,SAArB,CAL+C;AAMzD,IAAA,aAAa,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,cAArB,CAN0C;AAOzD,IAAA,UAAU,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,WAArB;AAP6C,GAAL;AAAA,CAAL,CAA1C;AAUP,OAAO,IAAM,SAAS,GAA8C,SAAvD,SAAuD,CAAA,KAAK,EAAG;AAAA;;AAC1E,MACE,eADF,GAUI,KAVJ,CACE,eADF;AAAA,MAEE,SAFF,GAUI,KAVJ,CAEE,SAFF;AAAA,MAGE,MAHF,GAUI,KAVJ,CAGE,MAHF;AAAA,MAIE,SAJF,GAUI,KAVJ,CAIE,SAJF;AAAA,MAKE,SALF,GAUI,KAVJ,CAKE,SALF;AAAA,MAME,QANF,GAUI,KAVJ,CAME,QANF;AAAA,MAOE,aAPF,GAUI,KAVJ,CAOE,aAPF;AAAA,MAQE,UARF,GAUI,KAVJ,CAQE,UARF;AAAA,MASE,IATF,GASE,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,iBAAA,EAAA,WAAA,EAAA,QAAA,EAAA,WAAA,EAAA,WAAA,EAAA,UAAA,EAAA,eAAA,EAAA,YAAA,CAAA,CATF;;AAYA,SAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,UAAU,0EAEE,eAFF,GAEsB,eAFtB,mDAGJ,SAHI,GAGU,SAHV,gCAIjB,WAJiB,EAIJ,MAJI,6CAKV,aALU,GAKQ,aALR,mDAMJ,SANI,GAMU,SANV,0DAOG,UAPH,GAOkB,UAPlB,kDAQL,QARK,GAQQ,QARR,iBAUnB,SAVmB;AADvB,GAAA,EAaK,IAbL,CAAA;AAeD,CA5BM;AA8BP,OAAO,IAAM,uBAAuB,GAAG,8BAA8B,CACnE,aADmE,EAEnE,SAFmE,CAA9D","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport classNames from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makePropTypesFactory, makeValidatingTransformFactory, } from \"./factory\";\r\nexport const makePropTypes = makePropTypesFactory(vars => ({\r\n    backgroundColor: PropTypes.oneOf([...vars.colors, ...vars.shades]),\r\n    italic: PropTypes.bool,\r\n    textAlign: PropTypes.oneOf(vars.textAlignments),\r\n    textColor: PropTypes.oneOf([...vars.colors, ...vars.shades]),\r\n    textSize: PropTypes.oneOf(vars.textSizes),\r\n    textTransform: PropTypes.oneOf(vars.textTransforms),\r\n    textWeight: PropTypes.oneOf(vars.textWeights),\r\n}));\r\nexport const transform = props => {\r\n    const { backgroundColor, className, italic, textAlign, textColor, textSize, textTransform, textWeight } = props, rest = tslib_1.__rest(props, [\"backgroundColor\", \"className\", \"italic\", \"textAlign\", \"textColor\", \"textSize\", \"textTransform\", \"textWeight\"]);\r\n    return Object.assign({ className: classNames({\r\n            [`has-background-${backgroundColor}`]: backgroundColor,\r\n            [`has-text-${textColor}`]: textColor,\r\n            \"is-italic\": italic,\r\n            [`is-${textTransform}`]: textTransform,\r\n            [`has-text-${textAlign}`]: textAlign,\r\n            [`has-text-weight-${textWeight}`]: textWeight,\r\n            [`is-size-${textSize}`]: textSize,\r\n        }, className) }, rest);\r\n};\r\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);\r\n//# sourceMappingURL=typography.js.map"]},"metadata":{},"sourceType":"module"}