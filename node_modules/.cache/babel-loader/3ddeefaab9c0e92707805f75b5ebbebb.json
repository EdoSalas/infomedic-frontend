{"ast":null,"code":"import _slicedToArray from\"C:/Users/Edo/Documents/GitHub/infomedic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";var useLocalStorage=function useLocalStorage(key,initialValue){var _useState=useState(function(){try{var item=window.sessionStorage.getItem(key);return item?JSON.parse(item):initialValue;}catch(err){// eslint-disable-next-line no-console\nconsole.error(err);return initialValue;}}),_useState2=_slicedToArray(_useState,2),storedValue=_useState2[0],setStoredValue=_useState2[1];var setValue=function setValue(value){try{var valueToStore=value instanceof Function?value(storedValue):value;setStoredValue(valueToStore);window.sessionStorage.setItem(key,JSON.stringify(valueToStore));}catch(err){// eslint-disable-next-line no-console\nconsole.error(err);}};var clearValue=function clearValue(){window.sessionStorage.removeItem(key);setStoredValue(initialValue);};return[storedValue,setValue,clearValue];};export default useLocalStorage;","map":{"version":3,"sources":["C:/Users/Edo/Documents/GitHub/infomedic/src/hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","item","window","sessionStorage","getItem","JSON","parse","err","console","error","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify","clearValue","removeItem"],"mappings":"8JAAA,OAASA,QAAT,KAAyB,OAAzB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,GAAD,CAAMC,YAAN,CAAuB,CAC7C,cAAsCH,QAAQ,CAAC,UAAM,CACnD,GAAI,CACF,GAAMI,CAAAA,IAAI,CAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8BL,GAA9B,CAAb,CACA,MAAOE,CAAAA,IAAI,CAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,CAAsBD,YAAjC,CACD,CAAC,MAAOO,GAAP,CAAY,CACZ;AACAC,OAAO,CAACC,KAAR,CAAcF,GAAd,EACA,MAAOP,CAAAA,YAAP,CACD,CACF,CAT6C,CAA9C,wCAAOU,WAAP,eAAoBC,cAApB,eAUA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAW,CAC1B,GAAI,CACF,GAAMC,CAAAA,YAAY,CAChBD,KAAK,WAAYE,CAAAA,QAAjB,CAA4BF,KAAK,CAACH,WAAD,CAAjC,CAAiDG,KADnD,CAEAF,cAAc,CAACG,YAAD,CAAd,CACAZ,MAAM,CAACC,cAAP,CAAsBa,OAAtB,CAA8BjB,GAA9B,CAAmCM,IAAI,CAACY,SAAL,CAAeH,YAAf,CAAnC,EACD,CAAC,MAAOP,GAAP,CAAY,CACZ;AACAC,OAAO,CAACC,KAAR,CAAcF,GAAd,EACD,CACF,CAVD,CAYA,GAAMW,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBhB,MAAM,CAACC,cAAP,CAAsBgB,UAAtB,CAAiCpB,GAAjC,EACAY,cAAc,CAACX,YAAD,CAAd,CACD,CAHD,CAKA,MAAO,CAACU,WAAD,CAAcE,QAAd,CAAwBM,UAAxB,CAAP,CACD,CA7BD,CA+BA,cAAepB,CAAAA,eAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useLocalStorage = (key, initialValue) => {\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      const item = window.sessionStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (err) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(err);\r\n      return initialValue;\r\n    }\r\n  });\r\n  const setValue = (value) => {\r\n    try {\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      window.sessionStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (err) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const clearValue = () => {\r\n    window.sessionStorage.removeItem(key);\r\n    setStoredValue(initialValue);\r\n  };\r\n\r\n  return [storedValue, setValue, clearValue];\r\n};\r\n\r\nexport default useLocalStorage;\r\n"]},"metadata":{},"sourceType":"module"}