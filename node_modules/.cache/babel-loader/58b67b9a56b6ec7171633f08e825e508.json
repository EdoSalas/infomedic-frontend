{"ast":null,"code":"import _defineProperty from \"C:/Users/Edo/Documents/GitHub/infomedic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport var makePropTypes = makePropTypesFactory(function (vars) {\n  return {\n    badge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    badgeColor: PropTypes.oneOf(vars.colors),\n    badgeOutlined: PropTypes.bool,\n    badgeRounded: PropTypes.bool,\n    badgeSize: PropTypes.oneOf(vars.badgeSizes)\n  };\n});\nexport var transform = function transform(props) {\n  var _classNames;\n\n  var badge = props.badge,\n      badgeColor = props.badgeColor,\n      badgeOutlined = props.badgeOutlined,\n      badgeRounded = props.badgeRounded,\n      badgeSize = props.badgeSize,\n      className = props.className,\n      rest = tslib_1.__rest(props, [\"badge\", \"badgeColor\", \"badgeOutlined\", \"badgeRounded\", \"badgeSize\", \"className\"]);\n\n  return Object.assign({\n    className: classNames((_classNames = {\n      badge: badge\n    }, _defineProperty(_classNames, \"has-badge-\".concat(badgeColor), badgeColor), _defineProperty(_classNames, \"has-badge-outlined\", badgeOutlined), _defineProperty(_classNames, \"has-badge-rounded\", badgeRounded), _defineProperty(_classNames, \"has-badge-\".concat(badgeSize), badgeSize), _classNames), className)\n  }, badge !== undefined ? {\n    \"data-badge\": badge\n  } : {}, rest);\n};\nexport var makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":{"version":3,"sources":["../../../src/base/helpers/badge.ts"],"names":[],"mappings":";;AAAA,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,SAAP,MAAsB,YAAtB;AAEA,SAEE,oBAFF,EAGE,8BAHF,QAIO,WAJP;AAgBA,OAAO,IAAM,aAAa,GAAG,oBAAoB,CAAC,UAAA,IAAI;AAAA,SAAK;AACzD,IAAA,KAAK,EAAE,SAAS,CAAC,SAAV,CAAoB,CAAC,SAAS,CAAC,MAAX,EAAmB,SAAS,CAAC,MAA7B,CAApB,CADkD;AAEzD,IAAA,UAAU,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,MAArB,CAF6C;AAGzD,IAAA,aAAa,EAAE,SAAS,CAAC,IAHgC;AAIzD,IAAA,YAAY,EAAE,SAAS,CAAC,IAJiC;AAKzD,IAAA,SAAS,EAAE,SAAS,CAAC,KAAV,CAAgB,IAAI,CAAC,UAArB;AAL8C,GAAL;AAAA,CAAL,CAA1C;AAQP,OAAO,IAAM,SAAS,GAGlB,SAHS,SAGT,CAAA,KAAK,EAAG;AAAA;;AACV,MACE,KADF,GAQI,KARJ,CACE,KADF;AAAA,MAEE,UAFF,GAQI,KARJ,CAEE,UAFF;AAAA,MAGE,aAHF,GAQI,KARJ,CAGE,aAHF;AAAA,MAIE,YAJF,GAQI,KARJ,CAIE,YAJF;AAAA,MAKE,SALF,GAQI,KARJ,CAKE,SALF;AAAA,MAME,SANF,GAQI,KARJ,CAME,SANF;AAAA,MAOE,IAPF,GAOE,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,YAAA,EAAA,eAAA,EAAA,cAAA,EAAA,WAAA,EAAA,WAAA,CAAA,CAPF;;AAUA,SAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,UAAU;AAEjB,MAAA,KAAK,EAAL;AAFiB,wDAGH,UAHG,GAGY,UAHZ,gCAIjB,oBAJiB,EAIK,aAJL,gCAKjB,mBALiB,EAKI,YALJ,oDAMH,SANG,GAMW,SANX,iBAQnB,SARmB;AADvB,GAAA,EAWM,KAAK,KAAK,SAAV,GAAsB;AAAE,kBAAc;AAAhB,GAAtB,GAAgD,EAXtD,EAYK,IAZL,CAAA;AAcD,CA5BM;AA8BP,OAAO,IAAM,uBAAuB,GAAG,8BAA8B,CACnE,aADmE,EAEnE,SAFmE,CAA9D","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport classNames from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makePropTypesFactory, makeValidatingTransformFactory, } from \"./factory\";\r\nexport const makePropTypes = makePropTypesFactory(vars => ({\r\n    badge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    badgeColor: PropTypes.oneOf(vars.colors),\r\n    badgeOutlined: PropTypes.bool,\r\n    badgeRounded: PropTypes.bool,\r\n    badgeSize: PropTypes.oneOf(vars.badgeSizes),\r\n}));\r\nexport const transform = props => {\r\n    const { badge, badgeColor, badgeOutlined, badgeRounded, badgeSize, className } = props, rest = tslib_1.__rest(props, [\"badge\", \"badgeColor\", \"badgeOutlined\", \"badgeRounded\", \"badgeSize\", \"className\"]);\r\n    return Object.assign({ className: classNames({\r\n            badge,\r\n            [`has-badge-${badgeColor}`]: badgeColor,\r\n            \"has-badge-outlined\": badgeOutlined,\r\n            \"has-badge-rounded\": badgeRounded,\r\n            [`has-badge-${badgeSize}`]: badgeSize,\r\n        }, className) }, (badge !== undefined ? { \"data-badge\": badge } : {}), rest);\r\n};\r\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);\r\n//# sourceMappingURL=badge.js.map"]},"metadata":{},"sourceType":"module"}